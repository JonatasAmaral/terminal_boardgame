{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "move character",
  "steps": [
    {
      "file": "solving-steps.md",
      "description": "next step: make to this game an enemy",
      "line": 15,
      "title": "there's something around here..."
    },
    {
      "file": "boardgame.py",
      "description": "Create a new status attribute to in-game usage and manipulation",
      "pattern": "(?<=char(.|\\n)+)status",
      "title": "new status attr"
    },
    {
      "file": "boardgame.py",
      "description": "Create a image set for the character instead of a fixed one\n\nWill dynamic change the active based on char new \"status\" attribute",
      "pattern": "(?<=char(.|\\n)+)images",
      "title": "char's new multi images"
    },
    {
      "file": "boardgame.py",
      "description": "### Create a \"game loop\"\n\nIt's a infinite loop, that will update the game status on each iteration, allowing us to make the moves and interactions\n\nSo, all _dynamic_ part's code must be wrapped by this loop.\nThe static definitions and structures should not.",
      "pattern": "^while\\s*True"
    },
    {
      "file": "boardgame.py",
      "description": "### Player Dies!\n\nAfter render (last canvas update), but before asking to move, check if player location is the same as the enemy.\n\nIf so, print that his/her is dead, and close the game by breaking the loop\n\nIf not, loop goes on normally",
      "pattern": "(?<=if.+char.+status.+==.+dead(.|\\n)+)print",
      "title": "player dies"
    },
    {
      "file": "boardgame.py",
      "description": "## Player Wins!\n\nAfter render (last canvas update), but before asking to move, check player status for winning.\n\nIf so, print winning message, and close the game by breaking the loop\n\nIf not, loop goes on normally",
      "pattern": "(?<=if.+char.+status.+==.+won(.|\\n)+)print",
      "title": "player win"
    },
    {
      "file": "boardgame.py",
      "description": "Gets the user's chosen move",
      "pattern": "move\\s*=\\s*input\\(",
      "title": "gets move"
    },
    {
      "file": "boardgame.py",
      "description": "Perform the user's movement",
      "pattern": "char.+pos.*\\s*=\\s*new_pos",
      "title": "move"
    },
    {
      "file": "boardgame.py",
      "description": "Update character's status to \"died\" or \"won\" accordingly, on touching the enemy.\n\nMust be on/after perform the move, close to loop end, so next iteration renders updated image.",
      "pattern": "(?<=if.+char.+pos.+==\\s*.+pos(.|\\n)+)status.*=",
      "title": "update status"
    },
    {
      "file": "boardgame.py",
      "description": "**update** canvas, removing previous board print:\n\nUses the lowlevel output module **stdout**, to \"take the carriage\" back each line, and clean'en.\n\nSo next print of the board will take the same place",
      "pattern": "(?<=for.+\n*).*stdout.write",
      "title": "updates canvas"
    }
  ],
  "isPrimary": true
}