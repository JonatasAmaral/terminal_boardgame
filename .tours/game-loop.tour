{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "move character",
  "steps": [
    {
      "file": "solving-steps.md",
      "description": "next step: move that monster",
      "line": 17,
      "title": "move the enemy too"
    },
    {
      "file": "boardgame.py",
      "description": "Status attribute to in-game usage and manipulation",
      "pattern": "(?<=char(.|\\n)+)status",
      "title": "status attr"
    },
    {
      "file": "boardgame.py",
      "description": "Iimage set for the character\n\nDynamic change the active based on char's status",
      "pattern": "(?<=char(.|\\n)+)images",
      "title": "char's images set"
    },
    {
      "file": "boardgame.py",
      "description": "Player start at bottom of the board, in the middle on the horizontal axis",
      "pattern": "(?<=char(.|\\n)+)pos",
      "title": "char at bottom"
    },
    {
      "file": "boardgame.py",
      "description": "Obstacle starts in front of the player",
      "pattern": "(?<=obstacle(.|\\n)+)pos",
      "title": "obstacle in front"
    },
    {
      "file": "boardgame.py",
      "description": "Food is at any horizontal position, but always on top half of the board (since player starts at bottom)",
      "pattern": "(?<=food(.|\\n)+)pos",
      "title": "food random distant location"
    },
    {
      "file": "boardgame.py",
      "description": "Dogs poop on random places",
      "pattern": "(?<=poop(.|\\n)+)pos",
      "title": "poop on random"
    },
    {
      "file": "boardgame.py",
      "description": "This enemy can go anywhere. It's a **ghost**!",
      "pattern": "(?<=enemy(.|\\n)+)pos",
      "title": "enemy anywhere"
    },
    {
      "file": "boardgame.py",
      "description": "If user tries a wrong move, skip this iteration, so world's time stays frozen",
      "pattern": "^.*continue",
      "title": "skip iteration"
    },
    {
      "file": "boardgame.py",
      "description": "Perform the user's movement",
      "pattern": "char.+pos.*\\s*=\\s*new_pos",
      "title": "player moves"
    },
    {
      "file": "boardgame.py",
      "description": "Makes enemy to one of the moves at random",
      "pattern": "enemy_move\\s*=",
      "title": "move enemy"
    },
    {
      "file": "boardgame.py",
      "description": "## Enemy movement \"inteligence\":\n\nEnemy will only move in the direction of the player\n\nIf it is \"above\", will go down\nIf is on left, will go right\nAnd vice-versa\n\nIf it is gonna move on vertical or horizontal axis, is an equal chance random event, respecting that will ways go closer the player\n\n\n### the calculation\n**choices** method choose an option with weights defined by a list.\n\nThe given weight list here, calculates the char and enemy locations diference, in a way that it results 1 in direction that takes it closer, and 0 on opposite",
      "pattern": "enemy.+pos.+>",
      "title": "moving calculation"
    },
    {
      "file": "boardgame.py",
      "description": "Update character's status to \"died\" or \"won\" accordingly\n\nMust be on/after perform the move, close to loop end, so next iteration renders updated image.",
      "pattern": "(?<=if.+char.+pos.+==\\s*.+pos(.|\\n)+)status.*=",
      "title": "update status"
    },
    {
      "file": "boardgame.py",
      "description": "**update** canvas, removing previous board print:\n\n_Moved to loop start_\n\nIf not firts iteration, uses the lowlevel output module **stdout**, to \"take the carriage\" back each line, and clean'en.\n\nSo next print of the board will take the same place",
      "pattern": "(?<=for.+\n*).*stdout.write",
      "title": "updates canvas"
    },
    {
      "file": "boardgame.py",
      "description": "### Player Dies!\n\nAfter render (last canvas update), but before asking to move, check if player location is the same as the enemy.\n\nIf so, print that his/her is dead, and close the game by breaking the loop\n\nIf not, loop goes on normally",
      "pattern": "(?<=if.+char.+status.+==.+dead(.|\\n)+)print",
      "title": "player dies"
    },
    {
      "file": "boardgame.py",
      "description": "## Player Wins!\n\nAfter render (last canvas update), but before asking to move, check player status for winning.\n\nIf so, print winning message, and close the game by breaking the loop\n\nIf not, loop goes on normally",
      "pattern": "(?<=if.+char.+status.+==.+won(.|\\n)+)print",
      "title": "player win"
    }
  ],
  "isPrimary": true
}