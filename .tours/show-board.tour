{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "show board",
  "steps": [
    {
      "file": "boardgame.py",
      "selection": {
        "start": {
          "line": 8,
          "character": 1
        },
        "end": {
          "line": 9,
          "character": 23
        }
      },
      "description": "for each cell (line/columns)",
      "title": "For each cell"
    },
    {
      "file": "boardgame.py",
      "selection": {
        "start": {
          "line": 10,
          "character": 3
        },
        "end": {
          "line": 10,
          "character": 12
        }
      },
      "description": "Get unique cell's number\n\n1...n\n\n2...2n\n\nn...nÂ²\n\n\nThen check if it's even or odd (it's remainder)\n\n_*For this 'evenness' purpose, a simple sum would be enough. But more of a subtle move_",
      "title": "gets cell's \"evenness\""
    },
    {
      "file": "boardgame.py",
      "selection": {
        "start": {
          "line": 13,
          "character": 4
        },
        "end": {
          "line": 14,
          "character": 23
        }
      },
      "description": "A math/string op trick in python for reduced text conditional:\n\n`cell` is a string, in python, multiplying it by a number can make it repeat: `'-'*3` -> `---`\n\nMultiply it by `0` means \"nothing\": `'text'*0` -> `''`. And by `1`, just it self.\n\n`num` is a remainder of 2, aka, `0` or `1`\n\nIt makes print `cell` for odd, and `''` for even.\nThe inverse is applied for `cell_white`. And those are concatenated togueter.\n\nFinal result: `cell` for odd, `cell_white` for even",
      "title": "choose color for evenness",
      "line": 0
    }
  ]
}